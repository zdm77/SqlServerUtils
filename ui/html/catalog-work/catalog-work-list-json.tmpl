{{template "base" .}}

{{define "main"}}
    <main class="form-main">
        <div class="card">
            <div class="card-header" id="cardHeader">
            </div>
            {{/*            {{template "list-panel"}}*/}}
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <button class="btn btn-primary bi bi-plus-circle "
                            style="font-size:14px;"
                            onclick="create()">
                        <span style="margin-left: 3px">Создать</span></button>
                    <button class="btn btn-success bi bi-arrow-counterclockwise "
                            style="font-size:14px;"
                            onclick="refresh()">
                        <span style="margin-left: 3px">Обновить</span></button>
                    <button id="buttonClear" class="btn btn-outline-success bi bi-x-circle "
                            style="font-size:14px;"
                            onclick="clearFind()">
                        <span style="margin-left: 3px">Очистить фильтр</span></button>
                </li>
                <li class="list-group-item" id="li-table">
                </li>
            </ul>
        </div>
        <script>
            function create() {
                document.location = '/catalog-work-create/?id=' + catalogId
            }

            function refresh() {
                // table.draw();
                arrFind = []
                $('#table').remove()
                renderTable()
            }

            let arrFind = []
            let headers = []
            let fieldNames = []

            //let dataTable = []
            function clearFind() {

                arrFind = []
                for (let i = 0; i <= headers.length; i++) {
                    let el = $('#find' + i)
                    //   console.log(el.val())
                    el.val('')

                }
                //  if (arrFind.length > 0) {
                let table = $('#json_data').DataTable();
                table.draw();
                $('#buttonClear').hide()
            }

            function find(el) {
                arrFind = []
                for (let i = 0; i < headers.length; i++) {

                    el = $('#find' + i)
                    const typeName = el.attr('type')
                    if (el.val()) {
                        arrFind.push({
                            id: i,
                            type: typeName,
                            val: el.val(),
                            fieldName: fieldNames[i],
                        })
                    }

                }
                if (arrFind.length > 0) {

                    $('#buttonClear').show()
                } else {
                    $('#buttonClear').hide()
                }
                //  if (arrFind.length > 0) {
                let table = $('#json_data').DataTable();
                table.draw();
                //}

            }

            function renderTable() {
                headers = []
                fieldNames = []
                let columns = []
                let liTable = document.getElementById("li-table")
                liTable.innerHTML = '  <table id="json_data"  class="table table-striped table-bordered table-sm table-responsive"></table>'
                let table = document.getElementById("json_data");
                let jsonData
                table.innerHTML = ''

                let html = ''

                fetch('/api/catalog-work-list',
                    {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            id: id,
                        })

                    })
                    .then(response => response.json())
                    .then((response) => {
                        if (response.text != 'not-login') {

                            console.log(response)
                            const obj = JSON.parse(response.json);
                            fieldNames = response.field_names
                            headers = response.headers
                            document.getElementById('cardHeader').innerText = response.name_catalog
                            id = response.catalog_id
                            const fieldId = response.field_id

                            html += '<thead>'
                            //поиск
                            html += '<tr>'
                            for (let i = 0; i < response.headers.length; i++) {
                                if (fieldNames[i] !== 'is_delete') {
                                    switch (response.types[i]) {
                                        case 'date': {
                                            html += '<td><input id="find' + i + '" type="date" class="form-control" onchange="find(this)"/></td>'
                                            break
                                        }
                                        case 'bit': {
                                            html += '<td><select type="bit" id="find' + i + '"  class="form-select"  onchange="find(this)"">'
                                            html += '<option value=""></option>'
                                            html += '<option value="1">Да</option>'
                                            html += '<option value="0">Нет</option>'
                                            html += '</select></td>'
                                            break
                                        }
                                        default: {
                                            html += '<td><input id="find' + i + '" type="text" class="form-control" onkeyup="find(this)"/></td>'
                                            break
                                        }
                                    }
                                } else {
                                    html += '<td></td>'
                                }
                            }
                            // html += '<td></td>'
                            html += '</tr>'
                            //заголовки
                            html += '<tr>'
                            let isHref = false
                            for (let i = 0; i < response.headers.length; i++) {
                                let header = response.headers[i]
                                html += '<th>' + header + '</th>'
                                let fieldName = response.field_names[i]
                                if (fieldName && fieldName !== 'is_delete') {
                                    if (fieldName === fieldId) {
                                        columns.push({
                                            visible: false,
                                            data: fieldName,
                                        })

                                    } else {
                                        if (!isHref) {
                                            columns.push({
                                                data: fieldName,
                                                render: function (data, type, row, meta) {
                                                    if (type === 'display') {
                                                        data = '<a href="/catalog-work-edit/?id=' + id + '&entityId=' + row[fieldId] + '">' + data + '</a>'
                                                    }
                                                    return data;
                                                }
                                            })
                                            isHref = true

                                        } else {
                                            let typeCell = response.types[i]
                                            columns.push({
                                                className: typeCell === 'date' || typeCell === 'bit' ? "text-center" : "",
                                                data: fieldName,
                                                type: typeCell === 'bit' ? 'html' : '',

                                                render: function (data, type, row, meta) {

                                                    switch (typeCell) {
                                                        case 'date': {
                                                            if (data === '') return data
                                                            let date = new Date(data)
                                                            return date.toLocaleDateString()
                                                        }
                                                        case 'bit': {
                                                            let isCheck = 0
                                                            if (data && data == 1) {
                                                                data = '<i class="bi bi-check2" style="font-size: 18px"></i>'
                                                                isCheck = 1
                                                            } else {
                                                                data = '<i></i>'
                                                            }
                                                            data += '<div hidden id=check_' + fieldName + row[fieldId] + '>' + isCheck + '</div>'
                                                        }
                                                    }

                                                    return data;
                                                }
                                            })
                                        }
                                    }
                                }
                            }
                            columns.push({
                                bSortable: false,
                                width: '40px',
                                data: "is_delete",
                                className: "text-center",
                                render: function (data, type, row, meta) {
                                    return '<i class="bi-trash text-danger" style="cursor: pointer"' +
                                        ' onclick="deleteTask(' + row["id"] + ',' + id + ')"></i>'


                                }
                            })
                            // html += '<th></th>'
                            html += '</tr>'


                            html += '</thead>'

                            jsonData = {
                                "data": obj
                            }


                            table.innerHTML = html
                            // if (!isRender) {


                            $('#json_data').DataTable({
                                language: {
                                    url: '/static/ru.json',
                                },
                                data: jsonData.data,
                                columns: columns,
                                // "columnDefs": [
                                //     { "type": "html", "targets": 4 }
                                // ],
                                headers: html,
                                sPaging: false,
                                pagingType: "simple",
                                "bLengthChange": false,
                                processing: true,
                                'sDom': 't',
                                scrollY: 700,
                                scroller: true,
                            })


                            $.fn.dataTable.ext.search.push(function (settings, data, index, rowData, counter) {

                                if (arrFind.length === 0) return true
                                let isOk = false

                                for (const item of arrFind) {

                                    switch (item.type) {
                                        case 'text': {
                                            //console.log(data[item.id])
                                            if (data[item.id].toUpperCase().startsWith(item.val.toUpperCase())) {
                                                isOk = true
                                            } else {
                                                return false
                                            }
                                            break
                                        }
                                        case 'date': {
                                            let val = new Date(item.val).toLocaleDateString();
                                            if (val == data[item.id]) {
                                                isOk = true
                                            } else {
                                                return false
                                            }
                                            break
                                        }
                                        // case 'bit': {
                                        //
                                        //     // const elId = '#check_' + item.fieldName + rowData[fieldId]
                                        //     //
                                        //     // const isCheck = $(elId).text()
                                        //     //
                                        //     // console.log('check', item.val, isCheck)
                                        //     if (item.val == isCheck) {
                                        //         isOk = true
                                        //     } else {
                                        //         return false
                                        //     }
                                        //     //   console.log(item.val)
                                        //
                                        //     break
                                        // }
                                        default : {
                                            if (item.val == data[item.id]) {
                                                isOk = true
                                            } else {
                                                return false
                                            }
                                        }
                                    }

                                }
                                return isOk

                            });
                            // } else {
                            //     table.draw()
                            // }
                            isRender = true
                            $('input,select,textarea').attr("autocomplete", "off");
                        } else {
                            document.location = '/'
                        }
                    })


            }


            function deleteTask(id, catalogId) {
                const isDel = confirm('Вы действительно хотите удалить запись? ')
                if (isDel) {
                    fetch('/api/catalog-work-list/delete/?id=' + id + '&catalogId=' + catalogId)
                        .then(response => response.json())
                        .then((response) => {

                            if (response.text !== 'not-login') {
                                if (response.text === 'ok') {
                                    renderTable()
                                    alert('Данные удалены')

                                } else {
                                    alert(response.text)
                                }
                            } else {
                                document.location = '/'
                            }
                        })
                }
            }

            let isRender = false
            let id = {{ .}}
                let
            catalogId = id
            renderTable()
            $(document).ready(function (e) {

                $('#buttonClear').hide()

            })
        </script>
    </main>
{{end}}