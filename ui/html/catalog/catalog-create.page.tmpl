{{template "base" .}}

{{define "main"}}
    <main class="form-main-big">
        <div class="card">
            <div class="card-header">
                Задача
            </div>
            <form id='form'
                  encType="multipart/form-data">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <div class="row">
                            <div class="col-3">
                                <label for="name" class="form-label">Наименование</label>
                                <input class="form-control" id="name" value={{ .Name}}>
                            </div>
                            <div class="col-3">
                                <label for="table_name" class="form-label">Таблица БД</label>
                                <input class="form-control" id="table_name" value={{ .TableName}}>
                            </div>
                            <div class="col-3">
                                <label for="" class="form-label">Сортировка по</label>
                                <select id="order_by_default" class="form-select">'
                                </select>
                            </div>
                            <div class="col-3">
                                <select style="margin-top: 30px" id="order_by_default_asc" class="form-select">'
                                    <option value="asc">Прямая</option>
                                    <option value="desc">Обратная</option>
                                </select>
                            </div>
                        </div>
                    </li>
                </ul>
            </form>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <div class="col-6">
                        <button id="btnSave" style="margin-left: 15px;font-size:14px;"
                                class="btn btn-primary bi bi-save" onclick="save()">
                            <span style="margin-left: 3px">Сохранить</span>
                        </button>
                        {{/*                        <button type="button" class="btn btn-primary bi bi-plus-circle" data-bs-toggle="modal"*/}}
                        {{/*                                data-bs-target="#modalField">*/}}
                        {{/*                            Создать*/}}
                        {{/*                        </button>*/}}
                        <button type="button" class="btn btn-primary bi bi-plus-circle" data-bs-toggle="modal"
                                onclick="createField()">
                            Создать
                        </button>
                        <button id="back" style="margin-left: 15px;font-size:14px;"
                                class="btn bi bi-skip-backward  bg-success text-light"
                                onclick="document.location='/catalog-list/?id='+typeEntity ">
                            <span style="margin-left: 3px">Назад</span>
                        </button>
                        <!-- Modal -->
                        <div class="modal fade" id="modalField" tabindex="-1" aria-labelledby="modalFieldLabel"
                             aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="modalFieldLabel">Новое поле</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <table id="table_field"
                                               class="table table-striped table-bordered table-sm table-responsive">
                                            <tr>
                                                <td>Наименование</td>
                                                <td><input onkeyup="validNewField()" class="form-control"
                                                           id="field_name_name" value=""/></td>
                                            </tr>
                                            <tr>
                                                <td>Поле БД</td>
                                                <td><input onkeyup="validNewField()" class="form-control"
                                                           id="field_name" value=""/></td>
                                            </tr>
                                            <tr>
                                                <td>Тип</td>
                                                <td>
                                                    <select class="form-select" id="field_type"
                                                            onchange="changeTypeNew()">
                                                        <option selected value="varchar">Строка</option>
                                                        <option value="int">Целое число</option>
                                                        <option value="float">Число с плавающей запятой</option>
                                                        <option value="date">Дата</option>
                                                        <option value="bit">Логический (да/нет)</option>
                                                        <option value="list">Список</option>
                                                    </select>
                                                </td>
                                            </tr>
                                            <tr id="link_block_table">
                                                <td>Таблица ссылка</td>
                                                <td>
                                                    <select class="form-select" id="link_table_view"
                                                            onchange="getFieldsLinkTable()">
                                                    </select>
                                                </td>
                                            </tr>
                                            <tr id="link_block">
                                                <td>Поле для отображения</td>
                                                <td>
                                                    <select class="form-select" id="link_field_view">
                                                    </select>
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть
                                        </button>
                                        <button type="button" class="btn btn-primary" id="btnSaveField"
                                                onclick="saveField()">Сохранить
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </li>
                <li class="list-group-item">
                    <table id="json_data"
                           class="table table-striped table-bordered table-sm table-responsive"></table>
                </li>
            </ul>
        </div>
        <style>
            th {
                text-align: center !important;
                vertical-align: middle !important;
                background-color: #D3D3D3 !important;
                /*color: white!important;*/
            }
        </style>
        <script>
            let btnSave = document.getElementById('btnSave')
            //  let btnSaveField = document.getElementById('btnSaveField')
            let myModal = new bootstrap.Modal(document.getElementById('modalField'), {
                keyboard: false
            })
            let isNewField = false

            function createField() {
                save(true)
                isNewField = true
                myModal.show()
                $('#field_name_name').val('')
                $('#field_name').val('')
                $('#field_name').prop('disabled', false);
                $('#field_type').val('varchar')
                $('#link_table_view').val('')
                $('#link_field_view').val('')
                $('#link_block').hide()
                $('#link_block_table').hide()


            }

            validNewField()

            function validNewField() {

                if ($('#field_name_name').val() !== "" && $('#field_name').val() !== "") {

                    $('#btnSaveField').prop('disabled', false);
                } else {
                    $('#btnSaveField').prop('disabled', true);
                }

            }

            function editField(nameDb, name, linkTable, linkField, type, isForeign) {
                isNewField = false
                myModal.show()
                $('#field_name_name').val(name)
                $('#field_name').val(nameDb)
                $('#field_name').prop('disabled', true);
                if (isForeign == 'true') {
                    $('#link_block').show()
                    $('#link_block_table').show()
                    $('#field_type').val('list')
                    $('#link_table_view').val(linkTable)
                    getFieldsLinkTable(linkField)
                    //$('#link_field_view').val(linkField)

                } else {
                    $('#field_type').val(type)
                    $('#link_block').hide()
                    $('#link_block_table').hide()
                }
                // $('#field_name_name').val(name)
                // $('#field_name_name').val(name)
                $('#btnSaveField').prop('disabled', false);
            }

            function getFieldsLinkTable(val) {
                let elFields = document.getElementById('link_field_view')
                elFields.innerHTML = ''
                const tableNameLink = $('#link_table_view').val()

                fetch('/api/get-db-fields',
                    {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            name: tableNameLink,
                            by_catalog_id: true,


                        })
                    })
                    .then(response => response.json())
                    .then((response) => {
                        if (response) {

                            let html = ''

                            response.map(function (item) {

                                html += '<option  value="' + item.name_db + '">' + item.name_db + '</option>'
                            })

                            elFields.innerHTML = html
                            if (val) {
                                elFields.value = val
                            }
                        }

                    })

            }

            function changeTypeNew() {

                const val = $('#field_type').val()

                if (val === 'list') {
                    $('#link_block').show()
                    $('#link_block_table').show()
                    getFieldsLinkTable()
                } else {

                    $('#link_block').hide()
                    $('#link_block_table').hide()
                }

            }

            $('#link_block').hide()
            $('#link_block_table').hide()
            let myModalEl = document.getElementById('modalField')


            let inputNameField = document.getElementById('field_name')
            let inputNameNameField = document.getElementById('field_name_name')

            myModalEl.addEventListener('shown.bs.modal', function () {
                inputNameNameField.focus()
            })
            const name = document.getElementById('name')
            name.addEventListener('keyup', function () {
                valid()

            });
            const tableDb = document.getElementById('table_name')
            tableDb.addEventListener('keyup', function () {
                valid()

            });
            const table = document.getElementById('json_data')
            let fields = {{ .Fields}}
            if (fields && fields.length > 0) renderTable()
            const orderByDefault = document.getElementById('order_by_default')
            const orderByDefaultAsc = document.getElementById('order_by_default_asc')

            function saveField() {

                let nameField = document.getElementById('field_name')
                let nameNameField = document.getElementById('field_name_name')
                let typeField = document.getElementById('field_type')
                let linkTableView = document.getElementById('link_table_view')

                let linkFieldView = document.getElementById('link_field_view')
                fetch('/api/create-db-field',
                    {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            name_db: nameField.value,
                            table_name: document.getElementById('table_name').value,
                            name_type: typeField.value,
                            link_table_id: Number(linkTableView.value),
                            link_field_view: linkFieldView.value,
                            catalog_id: id,
                            name: nameNameField.value,
                            is_new_field: Boolean(isNewField),

                        })

                    })
                    .then(response => response.json())
                    .then((response) => {

                        if (response == "ok") {

                            myModal.hide()
                            // for (let i = 0; i < fields.length; i++) {
                            //     if (fields[i] === nameField.value) {
                            //         if (typeField.value === 'list') {
                            //
                            //             fields[i].is_foreign_field = true
                            //         }
                            //         fields.push(item)
                            //     }
                            // }
                            //    let is_foreign_field = false

                            fields.push({
                                catalog_id: id,
                                name_db: nameField.value,
                                is_foreign_field: typeField.value === 'list',
                                is_nullable: true,
                                is_nullable_db: true,
                            })
                            location.reload();

                            //renderTable()
                            //  save(true)
                            // fetch('/api/save-db-fields',
                            //     {
                            //         method: 'POST',
                            //         headers: {
                            //             "Content-Type": "application/json"
                            //         },
                            //         body: JSON.stringify(fields)
                            //     })
                            //     .then(response => response.json())
                            //     .then((response) => {
                            //
                            //         window.location.reload();
                            //
                            //
                            //     })
                            //getFieldsByCatalogId(nameField.value, typeField.value)
                        } else {
                            alert(response)
                        }
                    })


            }

            function valid() {
                if (name.value === '' || tableDb.value === '') {
                    btnSave.disabled = true
                } else {
                    btnSave.disabled = false
                }
            }


            valid()
            // function setFieldsFromTable(){
            //     fields=''
            // }
            function setValuesFields() {
                for (let i = 0; i < fields.length; i++) {
                    fields[i].catalog_id = id
                    let elem = document.getElementById('valName' + i)
                    if (elem) {
                        fields[i].name = elem.value
                    }
                    elem = document.getElementById('notNull' + i)
                    if (elem) {
                        fields[i].is_nullable = !elem.checked
                    }
                    elem = document.getElementById('isList' + i)
                    // if (elem) {
                    if (elem && elem.checked) {
                        fields[i].is_list = true
                    } else {
                        fields[i].is_list = false
                    }
                    elem = document.getElementById('isForm' + i)
                    if (elem && elem.checked) {
                        fields[i].is_form = true
                    } else {
                        fields[i].is_form = false
                    }
                    elem = document.getElementById('linkId' + i)
                    if (elem) {
                        fields[i].link_table_id = Number(elem.value)

                    }

                    elem = document.getElementById('isUserCreate-' + i)

                    if (elem && elem.checked) {
                        fields[i].is_user_create = true
                    } else {
                        fields[i].is_user_create = false
                    }

                    elem = document.getElementById('isUserMod-' + i)
                    if (elem && elem.checked) {
                        fields[i].is_user_modify = true
                    } else {
                        fields[i].is_user_modify = false
                    }

                    elem = document.getElementById('isDateCreate-' + i)
                    if (elem && elem.checked) {
                        fields[i].is_date_create = true
                    } else {
                        fields[i].is_date_create = false
                    }

                    elem = document.getElementById('isDateMod-' + i)
                    if (elem && elem.checked) {
                        fields[i].is_date_modify = true
                    } else {
                        fields[i].is_date_modify = false
                    }

                    //проверяет доступ
                    elem = document.getElementById('isAccess' + i)
                    if (elem && elem.checked) {
                        fields[i].is_access_check = true
                    } else {
                        fields[i].is_access_check = false
                    }
                    //порядок
                    elem = document.getElementById('valOrder' + i)
                    if (elem) {
                        fields[i].order_by = Number(elem.value)
                    }
                    elem = document.getElementById('valOrderForm' + i)
                    if (elem) {
                        fields[i].order_by_form = Number(elem.value)
                    }
                    //fields[i].is_list = !elem.checked

                    // }
                }
            }

            function changeNotNull(id) {
                const fIsNotNull = document.getElementById('notNull' + id)
                const fIsForm = document.getElementById('isForm' + id)
                if (fIsNotNull.checked) {
                    fIsForm.checked = true
                    fIsForm.disabled = true
                } else {
                    fIsForm.disabled = false
                }

            }

            function changeNameField(id) {
                const fName = document.getElementById('valName' + id)
                const fIsList = document.getElementById('isList' + id)
                fIsList.disabled = !fName.value
                fIsList.checked = fName.value
                const fIsForm = document.getElementById('isForm' + id)

                // if (fIsNotNull.checked) {
                //
                // }
                const fIsDateCreate = document.getElementById('isDateCreate-' + id)
                const fisDateMod = document.getElementById('isDateMod-' + id)
                const fisUserCreate = document.getElementById('isUserCreate-' + id)
                const fisUserMod = document.getElementById('isUserMod-' + id)
                if ((fIsDateCreate && fIsDateCreate.checked)
                    || (fisDateMod && fisDateMod.checked)
                    || (fisUserCreate && fisUserCreate.checked)
                    || (fisUserMod && fisUserMod.checked)) {
                    fIsForm.disabled = true
                    fIsForm.checked = false
                } else {
                    fIsForm.disabled = !fName.value
                    fIsForm.checked = fName.value
                }
            }

            function changeCreateModify(elem) {
                let arr = elem.id.split('-')
                let idDisable = ''
                let idDisableOnlyStr = ''
                switch (arr[0]) {
                    case 'isDateCreate' : {
                        idDisable = 'isDateMod-'

                        break
                    }
                    case 'isDateMod' : {
                        idDisable = 'isDateCreate-'

                        break
                    }
                    case 'isUserCreate' : {
                        idDisable = 'isUserMod-'

                        break
                    }
                    case 'isUserMod' : {
                        idDisable = 'isUserCreate-'

                        break
                    }

                }
                idDisableOnlyStr = idDisable
                idDisable += arr[1]
                let elForm = document.getElementById('isForm' + arr[1])
                let elemDis = document.getElementById(idDisable)
                if (elem.checked) {

                    elemDis.checked = false
                    elemDis.disabled = true
                    for (let i = 0; i < fields.length; i++) {
                        if (i != arr[1]) {
                            let elemIn = document.getElementById(arr[0] + '-' + i)
                            if (elemIn) {
                                elemIn.checked = false
                                let elemDis2 = document.getElementById(idDisableOnlyStr + i)

                                if (elemDis2)
                                    elemDis2.disabled = false
                            }

                        }
                    }
                    elForm.checked = false
                    elForm.disabled = true

                } else {

                    elemDis.disabled = false
                    elForm.disabled = false
                }

            }

            function renderTable() {

                let html = ''
                let counter = 0
                html += '<thead>'
                html += '<tr>'

                html += '<th rowspan="2" width="100px" >Поле</th>'
                html += '<th rowspan="2" width="200px">Наименование</th>'
                html += '<th width="60px" rowspan="2" >Обяза-<br/>тельное</th>'
                html += '<th width="60px" rowspan="2" >Проверка<br/>доступа</th>'
                html += '<th width="60px" colspan="2" >Отображение</th>'
                html += '<th rowspan="2" width="200px" >Список</th>'
                html += '<th rowspan="2" width="40px" >Тип</th>'
                html += '<th colspan="2" >Пользователь</th>'
                html += '<th colspan="2">Дата</th>'

                html += '<th colspan="2" >Порядок</th>'
                html += '</tr>'
//////////////////

                html += '<tr>'
                html += '<th width="40px!important">В списке</th>'
                html += '<th  width="40px!important">В форме</th>'
                html += '<th  width="40px!important">Создал</th>'
                html += '<th  width="40px!important">Изменил</th>'
                html += '<th  width="40px!important">Создания</th>'
                html += '<th  width="40px!important">Изменения</th>'
                html += '<th>В списке</th>'
                html += '<th>В форме</th>'

                html += '</tr>'
                html += '</thead>'
                html += '<tbody>'
                fields.map(function (item) {
                    //   editField(item)
                    let strEdit = ''
                    strEdit += '"' + item.name_db + '",'
                    strEdit += '"' + item.name + '",'
                    strEdit += '"' + item.link_table_id + '",'
                    strEdit += '"' + item.link_field_view + '",'
                    strEdit += '"' + item.name_type + '",'
                    strEdit += '"' + item.is_foreign_field + '"'

                    html += '<tr>' +
                        '<td style="cursor: pointer" ><button class="btn btn-link" onclick=editField(' + strEdit + ')>' + item.name_db + '</button> </td>'
                    html += '<td><input onkeyup="changeNameField(' + counter + ')"  class="form-control" id=valName' + counter + ' value="' + item.name + '"'
                    if (item.is_identity) html += ' disabled '
                    html += '><div hidden>' + item.name + '</div> </td>'
                    html += '<td style="text-align: center">'

                    if (item.is_nullable_db) {
                        html += '<div class="form-check form-switch">' +
                            '<input onchange="changeNotNull(' + counter + ')"  class="form-check-input mx-auto" style="font-size: 24px" type="checkbox"  id=notNull' + counter

                        if (!item.is_nullable) html += ' checked '
                        html += '></div>'
                    } else {

                        html += '<i class="bi bi-check2" style="font-size: 25px"></i>'
                    }
                    //проверка доступа
                    html += '<td style="text-align: center">'

                    html += '<div class="form-check form-switch">' +
                        '<input  class="form-check-input mx-auto" style="font-size: 24px" type="checkbox"  id=isAccess' + counter

                    if (item.is_access_check) {
                        html += ' checked '
                    }

                    html += '></div>'

                    html += '</td>'


                    //В списке
                    html += '<td style="text-align: center">'

                    html += '<div class="form-check form-switch">' +
                        '<input  class="form-check-input mx-auto" style="font-size: 24px" type="checkbox"  id=isList' + counter

                    if (item.is_list && item.name) {
                        html += ' checked '
                    }
                    if (!item.name) {
                        html += ' disabled '
                    }
                    html += '><div hidden>' + item.is_list + '</div></div>'

                    html += '</td>'
                    ////////
                    //в Форме
                    html += '</td>'
                    html += '<td style="text-align: center">'

                    html += '<div class="form-check form-switch">' +
                        '<input  class="form-check-input mx-auto" style="font-size: 24px" type="checkbox"  id=isForm' + counter

                    if ((item.is_form && item.name) || !item.is_nullable_db) {
                        if (!item.is_identity)
                            html += ' checked '
                    }
                    if (!item.name) {
                        html += ' disabled '
                    }
                    html += '><div hidden>' + item.is_form + '</div></div>'

                    html += '</td>'
                    //////////////
                    //Выпадающий список
                    html += '<td>'
                    // if (item.name_type == 'int' && !item.is_identity) {
                    if (item.is_foreign_field) {
                        html += ' <select id="linkId' + counter + '" name="task" class="form-select"></select> '
                    }

                    html += '</td>'
                    html += '<td>' + item.name_type + '</td>'
                    // +
                    // '<td>' + item.precision + '</td>' +
                    // '<td>' + item.scale + '</td>'
                    /////////Пользователь
                    //Создал
                    html += '<td>'
                    if (item.name_type == 'varchar') {
                        html += '<div class="form-check form-switch">' +
                            '<input onchange="changeCreateModify(this)"  class="form-check-input mx-auto" style="font-size: 24px" type="checkbox"  id=isUserCreate-' + counter
                        if (item.is_user_create) {
                            html += ' checked '
                        }
                    }
                    html += ' </td>'
                    //Изменил
                    html += ' <td>'
                    if (item.name_type == 'varchar') {
                        html += '<div class="form-check form-switch">' +
                            '<input onchange="changeCreateModify(this)"  class="form-check-input mx-auto" style="font-size: 24px" type="checkbox"  id=isUserMod-' + counter
                        if (item.is_user_modify) {
                            html += ' checked '
                        }
                    }
                    html += ' </td>'
                    ///////

                    /////////Дата
                    //Создания
                    html += '<td>'

                    if (item.name_type == 'date') {
                        html += '<div class="form-check form-switch">' +
                            '<input onchange="changeCreateModify(this)" class="form-check-input mx-auto" style="font-size: 24px" type="checkbox"  id=isDateCreate-' + counter
                        if (item.is_date_create) {
                            html += ' checked '
                        }
                    }
                    html += ' </td>'
                    //Изменения
                    html += '<td>'
                    if (item.name_type == 'date') {
                        html += '<div class="form-check form-switch">' +
                            '<input  onchange="changeCreateModify(this)" class="form-check-input mx-auto" style="font-size: 24px" type="checkbox"  id=isDateMod-' + counter
                        if (item.is_date_modify) {
                            html += ' checked '
                        }
                    }
                    html += ' </td>'
                    ///////
                    //счетчик
                    //html += item.is_identity ? '<td  style="text-align: center"><i class="bi bi-check2"></i> </td>' : '<td></td>';
///порядок
                    html += '<td width="40px"><input class="form-control"  type="number" id=valOrder' + counter + ' value="' + item.order_by + '">' +
                        '<div hidden>' + item.order_by + '</div></td>'
                    html += '<td width="40px"><input class="form-control"  type="number" id=valOrderForm' + counter + ' value="' + item.order_by_form + '">' +
                        '<div hidden>' + item.order_by_form + '</div></td>'

                    html += '</tr>'
                    counter++

                })
                html += '</tbody>'
                table.innerHTML = html
                // $('json_data').wrap('<div class="big-table"></div>');
                $('#json_data').DataTable({
                    autoWidth: true,
                    "ordering": false,
                    //
                    // "columnDefs": [{
                    //     // "targets": [2, 3, 6, 7, 8, 9, 10, 11],
                    //     "orderable": false,
                    //     "aTargets" : [ "sorting_disabled" ]
                    // }],
                    'sDom': 't',
                    scrollY: 500,
                    scroller: true,

                    // aaSorting: [5]
                })
            }

            getListForDropdown()

            function getListForDropdown() {

                let list = []
                let htmlOrderBy = ''
                fetch('/api/catalog-list/?id=Справочники',
                    {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json"
                        },

                    })
                    .then(response => response.json())
                    .then((response) => {

                        if (response.text != 'not-login') {

                            response.map(function (item) {
                                list.push(item)
                            })
                            if (fields && fields.length) {
                                for (let i = 0; i < fields.length; i++) {


                                    let htmlD = ''
                                    let selectedId = 0
                                    let el = document.getElementById('linkId' + i)
                                    let el2 = document.getElementById('link_table_view')
                                    htmlD += '<option value="0"></option>'
                                    htmlOrderBy += '<option value="' + fields[i].name_db + '">' + fields[i].name_db + '</option>'
                                    for (let j = 0; j < list.length; j++) {
                                        //  console.log(list[j].id, fields[i].link_table_id)
                                        if (list[j].id === fields[i].link_table_id) {

                                            selectedId = j + 1
                                        }
                                        // console.log(list[j])
                                        htmlD += '<option value="' + list[j].id + '">' + list[j].name + '</option>'
                                    }
                                    if (el) {
                                        el.innerHTML = htmlD
                                        el.selectedIndex = selectedId
                                    }
                                    if (el2) {
                                        el2.innerHTML = htmlD
                                        el2.selectedIndex = selectedId
                                    }

                                }
                                orderByDefault.innerHTML = htmlOrderBy
                                orderByDefault.value = {{ .OrderByDefault}}
                                    orderByDefaultAsc.value = {{ .OrderByDefaultAsc}}

                            }

                        } else {
                            document.location = '/'
                        }
                    });


            }

            function getFields() {
                fields = []
                fetch('/api/get-db-fields',
                    {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            id: id,
                            name: tableDb.value,


                        })
                    })
                    .then(response => response.json())
                    .then((response) => {
                        fields = response

                        fields[0].catalog_id = id
                        renderTable()
                    })
            }

            function save(isNewField) {
                // const orderByDefault = document.getElementById('order_by_default')
                // const orderByDefaultAsc = document.getElementById('order_by_default_asc')
                //let orderByDefaultAscVal = true
                //  orderByDefaultAscVal = orderByDefaultAsc.value == 'true' ? true : false;

                // return
                fetch('/api/catalog-save',
                    {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            id: id !== 0 ? id : 0,
                            name: name.value,
                            table_name: tableDb.value,
                            type_entity: typeEntity,
                            order_by_default: orderByDefault.value,
                            order_by_default_asc: orderByDefaultAsc.value,

                        })
                    })
                    .then(response => response.json())
                    .then((response) => {

                        let txtArr = response.text.split("-")

                        if (txtArr[0] === "ok") {
                            if (!id) {

                                id = Number(txtArr[1])
                                //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/////
                                getFields()
                                for (field of fields) {

                                    if (!field.is_nullable_db && field.name === '' && !field.is_identity) {
                                        showError('Введите наименование для обязательных полей')
                                        //alert('Введите наименование для обязательных полей')
                                        return
                                    }
                                }
                                document.location = '/catalog-edit/?id=' + id
                            } else {
                                setValuesFields()
                                for (field of fields) {

                                    if (!field.is_nullable_db && field.name === '' && !field.is_identity) {
                                        showError('Введите наименование для обязательных полей')
                                        //alert('Введите наименование для обязательных полей')
                                        return
                                    }
                                }

                                fetch('/api/save-db-fields',
                                    {
                                        method: 'POST',
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify(fields)
                                    })
                                    .then(response => response.json())
                                    .then((response) => {

                                        if (!isNewField) {
                                            showMessage()
                                            window.location.reload();
                                        }
                                    })
                            }


                        } else {
                            showError(response.text)
                            // alert("Ошибка: " + response.text)
                        }
                    })

            }

            $(document).ready(function (e) {

            })
            {{/*console.log({{ .Fields}})*/}}
            let id = {{ .Id}}
                let
            typeEntity = {{ .TypeEntity}}
                $(document).ready(function (e) {
                    $('input,select,textarea').attr("autocomplete", "off");
                })
        </script>
    </main>
{{end}}